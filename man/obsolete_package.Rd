% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/obsolete_package.R
\name{obsolete_package}
\alias{obsolete_package}
\title{Obsolete a DataOne Package with a new version.}
\usage{
obsolete_package(mn, metadata_obsolete, metadata_new)
}
\arguments{
\item{mn}{(MNode) The DataOne member node}

\item{metadata_obsolete}{(character) The metadata pid of the old, or broken, version. Any
metadata pid from the obsolete version chain can be used - sets the pid to the
end of the version chain}

\item{metadata_new}{(character) The metadata pid of the new version. Any metadata
pid from the new version chain can be used - sets the pid to the beginning of
the version chain.}
}
\value{
(TRUE)
}
\description{
This function obsoletes a DataOne package with a newer version
by merging the two version chains. The ideal use case for this function is
when the only option to fix a broken package is by re-uploading a previous
version and merging the two version chains. In other cases
\code{NCEAS/arcticdatautils::publish_update} should be used.
}
\examples{
\dontrun{
cn <- dataone::CNode('STAGING')
mn <- dataone::getMNode(cn,'urn:node:mnTestARCTIC')
pkg_old <- arcticdatautils::create_dummy_package(mn)
pkg_new <- arcticdatautils::create_dummy_package(mn)

obsolete_package(mn, pkg_old$metadata, pkg_new$metadata)
}
}
\author{
Dominic Mullen, \email{dmullen17@gmail.com}
}
